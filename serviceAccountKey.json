{
  "type": "service_account",
  "project_id": "socialhumon",
  "private_key_id": "5733de035483d6cc92e04f3c8609f5040ea9be97",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCggz0sP6nrl7wM\ngLs9/HngN7Nqr2y+eyvAMJ4Pe36pwrkrpz4OIZghjjexTWDs6LZoUtHNSEh+nFwE\npxgfNJHCZ+2BjObs5RA8cSfDIvrkILmPPhAh3F5oOgWK/tzUa3YLvgH6yEe9T88s\ns9pLooefaFIkiwbbJo6otHeyfAeQwRlccMWqHYlbe3U56m/9qDsW6XrRQFcVrY1g\nzxT+UVPaooja3iP+nje2iznmjiD8GcW7e5IZz42xSPJCsQUBsiekkUZ3tGosb21D\nRyo3RQflZd12BKPmF1wia8yAGEZ/0km/7ytxCyWu7X6ugg/KJXTOMNB4TAZcNaMM\n9ArWMeVRAgMBAAECggEAI6YyQm8bUp9fHRnEPFakTOeiGgo/KSkbBPLnUAH6FkMQ\ntEDPN/0/GAjJlr/cTJG83XuzbBfnPfOFPmVMJrYav2Ysqk68hRW03u+0yJKuzVb1\nT3qVw6d5ckWcsIu9SRJa4+2969BqmoGsvj1tuMmuvHlDcSlNiwPLwG1gfkwss/nM\n+92sVOCifejS+D9qeU4XXs4PrWPLTwhLirtAdeX+fg8GTfVN02rwVcAG2e3xnVjH\nVQZRaY7B4okX3wEHHSxPQ6/sBUAgMIUqz9fcNOVSnlJHrsseSpg6rRIc6/euBRvS\n2sLO0czuC0ykLlI49+8CrnJpRn7NFhGhbutufQgQPwKBgQDVFFmGnwEhxgOf9k3L\nZE825QS8IdlcYA46Ep121MG4WDCovvZzXD8vh/VJMqbhrplO3TlXpsydJHovm6g5\nd6dGBAtLvJFDMqp5LZ5zi6RGnvAPLCAqPodXOcTlh0CUw6syeRBBYEzfp4u1j6q8\nSUDM0cj3f10wRRctOhd5r8A1RwKBgQDA2DqzLNPUpTZkCoGSRMH+xVeuilYb7VtA\nFNotKqJ2q72ldC0zcuWeWj/+05moXhJKdlsXAM1A9OAYRviluMiYBZ10nt792AnS\nV5WGOp3ezX4iMvGe4mBBLVYTz5RlAv2TUE3E5n4rJotdGLakkmt7j057YVnHHdVv\neTx75Vm8pwKBgHDH1JrsjizSIhkIxSRic4sarObnA6VhMiaKs82xztdD1n16lfd5\nW/hMfgfAR5QsVfjoHvHF14dVR1brjJ7eNitY+KGdrUVkC9cXzkZaIxk+BtIBCQVT\nE0+XxB+49vXGm1abvX7c+dNnWws+f6ApJaNDZpuZTjm+WAYYOVSvMY0BAoGANeCz\nlbeifzihV5Xv2XPIV2u/MY6IvEi2Q9MPmardtRYKaB1rO4KQUIuacZGgzn9p0M/8\nZxLcRZekvGOnuHVF5eM7uIdieb1QESpTJiteTA9RfDCLfP52Mf9+mw5VwVryiaPX\n9nkHKvsb2Ki87oHR8bV6EdKDCLR3GyveECdlyOUCgYEArsJRYGZYc4y7hJBs0j+w\nudLUVmilslHbTwmH/hbxS3Ws7KJ1r5Wu9bOWT3e3+MAQn7GDAVX0V8aF5yvyVNe1\ndfv2PfCzkPMX0YGY5mf7dNC9PdRXIxrusfyh4TWPg1JLld7xGSY75zsfGnrFU/8F\ngiDryT7Tvy80GP0IDOt1Yx0=\n-----END PRIVATE KEY-----\n",
  "client_email": "firebase-adminsdk-2glon@socialhumon.iam.gserviceaccount.com",
  "client_id": "117225828767958927146",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-2glon%40socialhumon.iam.gserviceaccount.com",
  "universe_domain": "googleapis.com"
}


const admin = require("firebase-admin");
const serviceAccount = require("./serviceAccountKey.json");// Укажите путь к вашему JSON-файлу сервисного аккаунта

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  storageBucket: "socialhumon.appspot.com" // Замените на ваш Storage Bucket
});

const admin = require('firebase-admin');

// Инициализация приложения Firebase с помощью учетных данных из переменных окружения
admin.initializeApp({
    credential: admin.credential.cert({
        projectId: process.env.GOOGLE_PROJECT_ID,
        clientEmail: process.env.GOOGLE_CLIENT_EMAIL,
        privateKey: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'), // Замените `\n` на новую строку
    }),
});

app.post('/upload', upload.fields([
  { name: 'videos', maxCount: 10 },
  { name: 'audio', maxCount: 10 }
]), async (req, res) => {
  const uploadedFiles = req.files;

  if (!uploadedFiles.videos && !uploadedFiles.audio) {
      return res.status(400).send('Нет файлов для загрузки.');
  }

  const bucket = admin.storage().bucket();
  const filesInfo = {
      videoFiles: [],
      audioFiles: []
  };

  try {
      // Загрузка видео
      if (uploadedFiles.videos) {
          for (const file of uploadedFiles.videos) {
              const fileName = `${Date.now()}_${file.originalname}`;
              const fileInBucket = bucket.file(fileName);
              
              await fileInBucket.save(file.buffer, {
                  metadata: {
                      contentType: file.mimetype,
                  },
              });
              
              const url = `https://firebasestorage.googleapis.com/v0/b/${bucket.name}/o/${encodeURIComponent(fileName)}?alt=media`;
              filesInfo.videoFiles.push({
                  name: file.originalname,
                  path: url,
                  type: file.mimetype,
              });
          }
      }

      // Загрузка аудио
      if (uploadedFiles.audio) {
          for (const file of uploadedFiles.audio) {
              const fileName = `${Date.now()}_${file.originalname}`;
              const fileInBucket = bucket.file(fileName);

              await fileInBucket.save(file.buffer, {
                  metadata: {
                      contentType: file.mimetype,
                  },
              });

              const url = `https://firebasestorage.googleapis.com/v0/b/${bucket.name}/o/${encodeURIComponent(fileName)}?alt=media`;
              filesInfo.audioFiles.push({
                  name: file.originalname,
                  path: url,
                  type: file.mimetype,
              });
          }
      }

      res.json({
          message: 'Файлы успешно загружены',
          files: filesInfo
      });
  } catch (error) {
      console.error('Ошибка при загрузке файлов в Firebase Storage:', error);
      res.status(500).send('Ошибка загрузки файлов.');
  }
});

// Обработчик маршрута для загрузки видеозаписей и аудио
app.post('/upload/media', upload.fields([{ name: 'video' }, { name: 'audio' }]), async (req, res) => {
  const uploadedFiles = req.files;

  if (!uploadedFiles.video && !uploadedFiles.audio) {
      return res.status(400).send('Нет файлов для загрузки.');
  }

  const bucket = admin.storage().bucket();
  const filesInfo = [];

  try {
      // Загрузка видео
      if (uploadedFiles.video) {
          for (const file of uploadedFiles.video) {
              const fileName = `${Date.now()}_${file.originalname}`;
              const fileInBucket = bucket.file(fileName);
              
              await fileInBucket.save(file.buffer, {
                  metadata: {
                      contentType: file.mimetype,
                  },
              });

              const url = `https://firebasestorage.googleapis.com/v0/b/${bucket.name}/o/${encodeURIComponent(fileName)}?alt=media`;
              filesInfo.push({
                  name: file.originalname,
                  path: url,
                  type: file.mimetype,
              });
          }
      }

      // Загрузка аудио
      if (uploadedFiles.audio) {
          for (const file of uploadedFiles.audio) {
              const fileName = `${Date.now()}_${file.originalname}`;
              const fileInBucket = bucket.file(fileName);

              await fileInBucket.save(file.buffer, {
                  metadata: {
                      contentType: file.mimetype,
                  },
              });

              const url = `https://firebasestorage.googleapis.com/v0/b/${bucket.name}/o/${encodeURIComponent(fileName)}?alt=media`;
              filesInfo.push({
                  name: file.originalname,
                  path: url,
                  type: file.mimetype,
              });
          }
      }

      res.json({
          message: 'Файлы успешно загружены',
          files: filesInfo
      });
  } catch (error) {
      console.error('Ошибка при загрузке файлов в Firebase Storage:', error);
      res.status(500).send('Ошибка загрузки файлов.');
  }
});
const firebase = require('firebase/app');
const { isatty } = require('tty');