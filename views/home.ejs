<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Главная страница</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <style>

.stories-header {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
}

.story-box {
    background-color: #f6f6f6;
    padding: 10px 15px;
    border-radius: 5px;
    margin-left: 10px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.story-box:hover {
    background-color: #e0e0e0;
}

.stories-container {
    display: flex;
    flex-wrap: wrap;
}

.story-card {
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 15px;
    margin: 10px;
    width: 200px; /* Ширина карточки */
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    text-align: center;
}

.story-card video {
    width: 100%;
    border-radius: 8px;
}
        /* Основные стили */
        body {
            font-family: 'Roboto', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f7fa;
            color: #343a40;
        }
    
        h1 {
            text-align: center;
            margin: 30px 0;
            color: #0056b3;
            font-weight: 700;
            font-size: 2.5rem;
            text-transform: uppercase;
        }
    
        nav {
            background-color: #0056b3;
            padding: 15px;
            display: flex;
            justify-content: space-between;
            flex-wrap: wrap;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        }
    
        nav h2 {
            color: #ffffff;
            margin-right: 20px;
            font-weight: 500;
            font-size: 1.2rem;
        }
    
        nav a {
            color: white;
            padding: 10px 15px;
            text-decoration: none;
            border-radius: 5px;
            transition: background-color 0.2s;
            font-weight: 500;
        }
    
        nav a:hover {
            background-color: #004494;
        }
    
        .content {
            max-width: 900px;
            margin: 20px auto;
            padding: 20px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s, box-shadow 0.2s;
        }
    
        .content:hover {
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
            transform: translateY(-5px);
        }
    
        h2 {
            color: #0056b3;
            margin: 20px 0;
            font-weight: 500;
            font-size: 1.5rem;
        }
    
        ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }
    
        li {
            background: #f8f9fa;
            margin: 10px 0;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s, box-shadow 0.2s;
            display: flex;
            flex-direction: column;
        }
    
        li:hover {
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
            transform: translateY(-2px);
        }
    
        .post-image, video {
            max-width: 100%;
            border-radius: 10px;
            margin-top: 10px;
            cursor: pointer;
            transition: transform 0.2s;
        }
    
        video:hover, .post-image:hover {
            transform: scale(1.05);
        }
    
        /* Модальные окна */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.8);
        }
    
        .modal-content {
            margin: 10% auto;
            width: 90%;
            max-width: 700px;
        }
    
        .close {
            color: white;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }
    
        /* Стиль для модального окна загрузки видео */
        .upload-video-modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.8);
            padding-top: 60px;
        }
    
        .upload-video-content {
            background-color: white;
            margin: 0 auto;
            padding: 20px;
            border-radius: 10px;
            width: 90%;
            max-width: 600px;
        }
    
        .upload-video-close {
            color: red;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }
    
        footer {
            text-align: center;
            margin-top: 20px;
            padding: 10px;
            color: #777;
            background-color: #f1f1f1;
            border-top: 1px solid #ccc;
            font-size: 0.9rem;
        }
    
        .button-group {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
    
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 8px 12px;
            border-radius: 5px;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s;
            font-size: 1rem;
        }
    
        .btn-primary {
            background-color: #007bff;
            color: white;
        }
    
        .btn-primary:hover {
            background-color: #0056b3;
        }
    
        .btn-secondary {
            background-color: #e2e2e2;
            color: #343a40;
        }
    
        .btn-secondary:hover {
            background-color: #d1d1d1;
        }
    
        .notification-badge {
            background-color: red;
            color: white;
            border-radius: 50%;
            padding: 2px 6px;
            position: relative;
            top: -8px;
            right: -5px;
            font-size: 0.8rem;
        }
    
        /* Поиск пользователей */
        .user-search-container {
            background-color: #ffffff;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin: 20px 0;
        }
    
        .user-search-form {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }
    
        .user-search-form input {
            flex-grow: 1;
            padding: 10px;
            border-radius: 5px;
            border: 1px solid #ccc;
            margin-right: 10px;
            font-size: 16px;
            transition: border-color 0.3s;
        }
    
        .user-search-form input:focus {
            border-color: #007bff;
            outline: none;
        }
    
        .user-list {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }
    
        .user-actions {
            display: flex;
            justify-content: space-between;
            align-items: center; 
            background: #f8f9fa;
            margin: 10px 0;
            padding: 15px;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s, box-shadow 0.2s;
        }
    
        .user-actions:hover {
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
            transform: translateY(-2px);
        }
    
        .username {
            font-weight: bold;
            color: #0056b3;
        }
    
        .no-users {
            color: #dc3545;
            text-align: center;
            padding: 15px;
            border-radius: 5px;
            background: #f8d7da;
            margin: 10px 0;
        }
    
        /* Камера */
        .camera-button {
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 10px 15px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
    
        .camera-button:hover {
            background-color: #218838;
        }
    
        .camera-icon {
            margin-right: 5px;
        }
        


        .content {
    padding: 20px;
    background-color: #f9f9f9; /* Светлый фон для контента */
    border-radius: 10px; /* Закругленные углы для контейнера */
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); /* Тень вокруг контейнера */
}

h2 {
    font-size: 24px;
    margin-bottom: 15px; /* Отступ снизу заголовка */
}

.btn {
    background-color: #007bff; /* Цвет кнопки */
    color: white; /* Цвет текста кнопки */
    border: none;
    padding: 10px 15px; /* Отступ внутри кнопки */
    border-radius: 5px; /* Закругление углов у кнопки */
    cursor: pointer; /* Указатель при наведении */
}

.btn:hover {
    background-color: #0056b3; /* Темнее при наведении */
}

.stories-container {
    display: flex; /* Флекс контейнер для горизонтального отображения */
    overflow-x: auto; /* Прокрутка по оси Х, если нужно */
    padding: 10px 0; /* Отступ сверху и снизу */
}

.story-item {
    background-color: white; /* Цвет фона для историй */
    border-radius: 10px; /* Закругленные углы для элементов истории */
    margin-right: 10px; /* Отступ между элементами */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Мягкая тень */
    overflow: hidden; /* Скрытие элементов, выходящих за границу */
    text-align: center; /* Центрирование текста */
    width: 100px; /* Фиксированная ширина для историй */
}

.story-item img {
    width: 100%; /* Полная ширина изображения в карточке */
    height: auto; /* Автоматическая высота для соблюдения пропорций */
    border-bottom: 4px solid #007bff; /* Линия внизу карточки */
}

.story-item span {
    display: block; /* Отображение как блок */
    padding: 8px; /* Отступ для текста */
    font-weight: bold; /* Жирный текст */
    color: #333; /* Цвет текста */
}

.stories-container::-webkit-scrollbar {
    display: none; /* Скрытие скроллбара для эстетики */
}


            .unread-indicator {
                color: red; /* Цвет для непрочитанной истории */
                margin-left: 5px;
                font-weight: bold;
            }



            .stories-header {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
}

#my-story-square {
    border: 1px solid #ccc;
    padding: 10px;
    margin-left: 20px;
    position: relative; /* Позиционирование для индикатора */
    cursor: pointer;
}

.my-stories-list {
    margin-top: 10px;
    display: none; /* Скрыть список по умолчанию */
}

.my-stories-list.visible {
    display: block; /* Показывать список, когда он активен */
}

.unread-indicator {
    color: red;
    position: absolute;
    top: 5px;
    right: 5px;
}

.story-item {
    cursor: pointer;
}


.stories-header {
    padding: 10px;
}

.story-box {
    border: 1px solid #ccc;
    width: 80px;
    height: 80px;
    margin-right: 20px;
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
}

.unseen-indicator {
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: 2px solid #ff0000; /* красный цвет для индикатора */
    box-shadow: 0 0 10px rgba(255, 0, 0, 0.7);
    border-radius: 50%; /* чтобы сделать индикатор круглым */
}

.stories-container {
    list-style: none;
    padding: 0;
}

.stories-container li {
    margin: 10px 0;
    display: flex;
    align-items: center;
}

.stories-container img {
    width: 100px; /* фиксированная ширина для изображений */
    height: auto; /* сохраняет пропорции */
    border-radius: 10px; /* закругленные углы */
}
    </style>
</head>
<body>
    <header>
        <h1>Лента новостей</h1>
        <nav>
            <div class="user-search-container">
                <h2>Поиск пользователей:</h2>
                <form action="/home" method="GET" class="user-search-form">
                    <input type="text" name="search" value="<%= search || '' %>" placeholder="Введите имя пользователя" required autocomplete="off" />
                    <button type="submit" class="btn btn-primary">Поиск</button>
                </form>
                
                <h2>Пользователи:</h2>
                <ul class="user-list">
                    <% if (users && users.length > 0 && search) { %>
                        <% users.forEach(user => { %>
                            <li class="user-actions">
                                <span class="username"><%= user.username %></span>
                                <div class="button-group">
                                    <button class="btn btn-secondary" onclick="window.location.href='/messages/<%= user._id %>'">Написать сообщение</button>
                                    <button class="btn btn-secondary open-profile-button" onclick="window.location.href='/profile/<%= user._id %>'">Открыть профиль</button>
                                </div>
                            </li>
                        <% }) %>
                    <% } else if (search) { %>
                        <li class="no-users">Нет пользователей для отображения.</li>
                    <% } %>
                </ul>
            </div>
            
            <div class="nav-menu">
                <nav id="user-nav">
                    <a href="/logout">Выйти</a>
                    <a href="/create-post">Создать пост</a>
                    <a href="/music">Музыка</a>
                    <a href="/calls">Звонки</a>
                    <a href="/history">История сообщений <span id="unreadMessageCount" class="notification-badge">0</span></a> 
                    <a href="/friends">Список друзей</a>
                    <a href="/profile/<%= currentUser._id %>">Профиль</a>
                    <div class="dropdown">
                        <button>Уведомления
                            <span id="notification-count" class="notification-badge">0</span>
                        </button>
                        <div class="dropdown-content">
                            <a href="/notifications">Просмотреть все уведомления</a>
                        </div>
                    </div>
                </nav>
            </div>
        </nav>
    </header>

    <main>
        <section class="content">
            <h2>Истории:</h2>
            <div class="stories-header">
                <button id="create-story-btn" class="btn btn-primary" onclick="window.location.href='/upload-videos'">
                    <i class="fas fa-plus"></i> Создать историю
                </button>
        
                <div class="story-box" id="my-stories" onclick="viewMyStories()">
                    <span>Мои истории</span>
                </div>
        
                <div class="story-box" id="friends-stories" onclick="viewFriendsStories()">
                    <span>Истории друзей</span>
                </div>
        
                <div class="story-box" id="subscriptions" onclick="viewSubscriptions()">
                    <span>Подписки</span>
                </div>
            </div>
        
            <!-- Элемент для отображения ваших историй -->
            <div id="my-stories-container" class="stories-container">
                <ul id="my-stories-list">
                    <!-- Истории будут динамически добавляться сюда из JavaScript -->
                </ul>
            </div>
        </section>
        
        

        <section class="content">
            <h2>Посты от ваших друзей:</h2>
        <ul>
            <ul id="posts-list">
                <% if (posts && posts.length > 0) { %>
                    <% posts.forEach(post => { %>
                        <li class="post-card">
                            <p><strong>id="posts-list"></strong></p>
                            
                            <% if (post.files && post.files.length > 0) { %>
                                <img src="<%= post.files[0] %>" alt="Image description" class="post-image" onclick="openImage(this.src)" />
                                <p>
                                    <a href="<%= post.files[0] %>" download>Скачать изображение</a>
                                </p>
                            <% } else { %>
                                <p>Изображения нет. <a href="/create-post">Создайте пост, чтобы добавить изображения.</a></p>
                            <% } %>
                        
        
                        <div class="post-actions">
                            <span class="likes">
                                <button class="like-button" data-id="<%= post._id %>" onclick="likePost('<%= post._id %>')">
                                    <span role="img" aria-label="like">👍</span> <span class="like-count"><%= post.likes.length %></span>
                                </button>
                            </span>
                            <span class="views">
                                <span role="img" aria-label="views">👁️</span> <span class="view-count"><%= post.views %></span>
                            </span>
                            <span class="shares">
                                <button class="share-button" onclick="toggleShareOptions()">
                                    <span role="img" aria-label="share">📤</span> <span class="share-count"><%= post.shares %></span>
                                </button>
                            </span>
                            <span class="comments">
                                <button class="comment-button" data-id="<%= post._id %>" onclick="commentPost('<%= post._id %>')">
                                    <span role="img" aria-label="comment">💬</span> <span class="comment-count"><%= post.comments.length %></span>
                                </button>
                            </span>
                            
                        </div>
                        <div id="share-options" style="display:none;">
                            <h3>Поделитесь в социальных сетях</h3>
                            <ul>
                                <li><a href="https://facebook.com/sharer/sharer.php?u=<%= encodeURIComponent(post.url) %>" target="_blank">Facebook</a></li>
                                <li><a href="https://twitter.com/intent/tweet?url=<%= encodeURIComponent(post.url) %>" target="_blank">Twitter</a></li>
                                <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=<%= encodeURIComponent(post.url) %>" target="_blank">LinkedIn</a></li>
                                <li><a href="https://vk.com/share.php?url=<%= encodeURIComponent(post.url) %>" target="_blank">ВКонтакте</a></li>
                                <li><a href="https://www.instagram.com/?url=<%= encodeURIComponent(post.url) %>" target="_blank" onclick="alert('Для репоста в Instagram, загрузите ссылку в приложении.');">Instagram (пост)</a></li>
                                <li><a href="https://www.instagram.com/?url=<%= encodeURIComponent(post.url) %>" target="_blank" onclick="alert('Для добавления в Историю Instagram, загрузите ссылку в приложении.');">Instagram (история)</a></li>
                            </ul>
                        
                            <h3>Выберите друга для отправки сообщения</h3>
                            <select id="friendsList">
                                <option value="">Загрузка друзей...</option>
                            </select>
                        
                            <h4>Сообщение:</h4>
                            <textarea id="message-content" rows="4" placeholder="Введите ваше сообщение..."></textarea>
                            <br>
                            <button onclick="sendMessage()">Отправить сообщение</button>
                        </div>
                    
                        <h4>Последние комментарии:</h4>
                        <ul>
                            <% if (post.comments && post.comments.length > 0) { %>
                                <% post.comments.forEach(comment => { %>
                                    <li>
                                        <strong><a href="/profile/<%= comment.userId._id %>"><%= comment.userId.username %></a>:</strong>
                                        <%= comment.content %>
                                        <button class="like-button" data-comment-id="<%= comment._id %>">👍 Лайк</button>
                                        <button class="reply-button" data-comment-id="<%= comment._id %>">Ответить</button>
                                        <div class="reply-form" id="reply-form-<%= comment._id %>" style="display: none;">
                                            <textarea placeholder="Ваш ответ..."></textarea>
                                            <button class="submit-reply" data-comment-id="<%= comment._id %>">Отправить</button>
                                        </div>
                                    </li>
                                <% }); %>
                            <% } else { %>
                                <li>Нет комментариев для отображения.</li>
                            <% } %>
                        </ul>
                    </li>
                <% }) %>
            <% } else { %>
                <li>Нет постов у пользователя.</li>
            <% } %>
        </ul>

        <!-- Модальное окно для изображения -->
        
            <ul id="posts-list"></ul>
        </section>
    </main>

    <!-- Модальное окно для изображения -->
    <div id="imageModal" class="modal">
        <span class="close" onclick="closeImage()">&times;</span>
        <img class="modal-content" id="modalImage" />
    </div>

    <!-- Модальное окно для загрузки видео -->
    <div id="uploadVideoModal" class="upload-video-modal">
        <div class="upload-video-content">
            <span class="upload-video-close" onclick="closeUploadModal()">&times;</span>
            <h2>Создать историю</h2>
            <input type="file" id="videoInput" accept="video/*" style="width: 100%;"/>
            <button id="uploadVideoBtn" class="btn btn-primary mt-3">Загрузить видео</button>
        </div>
    </div>

    <footer>
        <p>&copy; 2023 Ваш Ресурс</p>
    </footer>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            initializeEventListeners();
            loadInitialData();
        });

        fetch('http://localhost:5000/api/posts')
    .then(response => response.json())
    .then(posts => {
        posts.forEach(post => {
            // Отображаем контент поста
            console.log(post.content);

            // Отображаем изображения, если они есть
            post.files.forEach(file => {
                const imgElement = document.createElement('img');
                imgElement.src = file; // Здесь file - это полный URL
                document.body.appendChild(imgElement); // Или вставьте в нужный контейнер
            });
        });
    })
    
        function initializeEventListeners() {
            document.getElementById('create-story-btn').addEventListener('click', openUploadModal);
            document.getElementById('uploadVideoBtn').addEventListener('click', uploadStory);
        }
    
        function openUploadModal() {
            document.getElementById('uploadVideoModal').style.display = 'block';
        }
    
        function closeUploadModal() {
            document.getElementById('uploadVideoModal').style.display = 'none';
        }
    
        async function uploadStory() {
            const fileInput = document.getElementById('videoInput');
            const file = fileInput.files[0];
            if (!file) {
                alert("Пожалуйста, выберите видео для загрузки.");
                return;
            }
    
            const formData = new FormData();
            formData.append('video', file);
    
            try {
                const response = await fetch('/api/stories', { method: 'POST', body: formData });
                if (!response.ok) throw new Error('Ошибка при загрузке истории');
                
                alert('История успешно загружена!');
                closeUploadModal();
                loadUserStories(); // Обновить список историй
            } catch (error) {
                console.error('Ошибка при загрузке истории:', error);
                alert('Ошибка загрузки истории: ' + error.message);
            }
        }
    
        async function loadInitialData() {
            await Promise.all([loadPosts(), loadUserStories(), loadNotifications(), loadCurrentUser()]);
        }
    
        async function loadPosts() {
            try {
                const response = await fetch('/api/posts');
                if (!response.ok) throw new Error('Не удалось загрузить посты');
                const posts = await response.json();
                renderPosts(posts);
            } catch (error) {
                console.error('Ошибка:', error);
            }
        }
    
        function renderPosts(posts) {
            const postsList = document.getElementById('posts-list');
            postsList.innerHTML = '';
            
            if (posts.length > 0) {
                posts.forEach(post => {
                    const listItem = document.createElement('li');
                    listItem.innerHTML = `
                        <strong>${post.userId?.username || 'Неизвестный'}</strong>
                        <p>${post.content || ''}</p>
                        ${post.videoUrl ? `<video controls src="${post.videoUrl}" class="post-image"></video>` : ''}
                        <div class="button-group">
                            <button onclick="likePost('${post._id}')" class="btn btn-secondary">👍 Like <span>${post.likes || 0}</span></button>
                            <button onclick="sharePost('${post._id}')" class="btn btn-secondary">📤 Share</button>
                            <button onclick="commentPost('${post._id}')" class="btn btn-secondary">💬 Comment</button>
                        </div>
                    `;
                    postsList.appendChild(listItem);
                });
            } else {
                postsList.innerHTML = '<li>Нет постов от ваших друзей.</li>';
            }
        }
       
        function renderStories(stories) {
            const storiesList = document.getElementById('my-stories-list'); // Проверьте ID, если используется
            storiesList.innerHTML = ''; // Очистите предыдущие истории
    
            if (stories.length === 0) {
                storiesList.innerHTML = '<li>Нет историй для отображения.</li>';
            } else {
                stories.forEach(story => {
                    const storyElement = document.createElement('li');
                    storyElement.innerHTML = `
                        <h4>${story.title || 'Без названия'}</h4>
                        <video controls src="${story.videoUrl}" class="post-image"></video>
                    `;
                    storiesList.appendChild(storyElement);
                });
            }
        }
        async function loadInitialData() {
    const user = await loadCurrentUser(); // Этот вызов должен быть выполнен до загрузки историй
    await Promise.all([loadPosts(), loadUserStories(user._id), loadNotifications()]);
}
        async function loadCurrentUser() {
            try {
                const response = await fetch('/api/current-user', { credentials: 'include' }); // Добавлен credentials
                if (!response.ok) throw new Error('Не удалось загрузить текущего пользователя');
                
                const user = await response.json();
                console.log("Данные пользователя:", user);
                return user;
            } catch (error) {
                console.error("Ошибка загрузки текущего пользователя:", error.message);
                return null;
            }
        }
    
        async function loadNotifications() {
            try {
                const response = await fetch('/api/notifications');
                if (!response.ok) throw new Error('Не удалось загрузить уведомления');
                const notifications = await response.json();
                renderNotifications(notifications);
            } catch (error) {
                console.error('Ошибка при загрузке уведомлений:', error);
            }
        }
    
        function renderNotifications(notifications) {
            const notificationList = document.getElementById('notification-list');
            notificationList.innerHTML = '';
    
            notifications.forEach(notification => {
                const listItem = document.createElement('li');
                listItem.textContent = notification.message;
                notificationList.appendChild(listItem);
            });
        }
    
        // Уведомления и сообщения
        setInterval(loadNotifications, 10000);
        setInterval(updateMessageCount, 10000);
    
        // Обновление уведомлений и сообщений
        async function updateNotificationCount() {
            try {
                const response = await fetch('/api/unread-notifications');
                const data = await response.json();
                const notificationBadge = document.getElementById('notification-count');
                notificationBadge.textContent = data.totalCount || 0;
    
                const requestsList = document.getElementById('friend-requests-list');
                requestsList.innerHTML = '';
                if (data.friendRequests && data.friendRequests.length > 0) {
                    data.friendRequests.forEach(request => {
                        requestsList.innerHTML += `
                            <li>${request.from} отправил вам запрос в друзья. 
                                <button onclick="acceptRequest('${request.id}')">Принять</button>
                                <button onclick="declineRequest('${request.id}')">Отклонить</button>
                            </li>`;
                    });
                } else {
                    requestsList.innerHTML = '<li>Нет новых запросов в друзья.</li>';
                }
            } catch (err) {
                console.error('Ошибка обновления количества уведомлений:', err);
            }
        }
    
        async function updateMessageCount() {
            try {
                const response = await fetch('/api/unread-messages');
                if (!response.ok) throw new Error('Сетевая ошибка');
                const data = await response.json();
    
                const messageBadge = document.getElementById('unreadMessageCount');
                if (messageBadge) {
                    messageBadge.innerText = data.totalCount;
                } else {
                    console.error('Элемент с ID "unreadMessageCount" не найден');
                }
            } catch (error) {
                console.error('Ошибка при обновлении количества непрочитанных сообщений:', error);
            }
        }
    
        // Показать историю
        let currentStoryIndex = 0;
        let currentStories = [];
    
        function playStory(story) {
            if (!story || !story.videoUrl) {
                console.error('История не существует или не имеет videoUrl');
                return;
            }
    
            const modal = createStoryModal(story);
            document.body.appendChild(modal);
        }
    
        function createStoryModal(story) {
            const modal = document.createElement('div');
            modal.classList.add('stories-modal');
    
            const video = document.createElement('video');
            video.src = story.videoUrl;
            video.controls = true;
            video.autoplay = true;
    
            const username = document.createElement('h4');
            username.textContent = story.user.username;
    
            const profileImage = document.createElement('img');
            profileImage.src = story.user.profileImage;
            profileImage.alt = story.user.username;
            profileImage.style.width = '50px';
    
            const nextButton = document.createElement('button');
            nextButton.textContent = 'Следующая история';
            nextButton.onclick = showNextStory;
    
            const prevButton = document.createElement('button');
            prevButton.textContent = 'Предыдущая история';
            prevButton.onclick = showPreviousStory;
    
            modal.append(profileImage, username, video, prevButton, nextButton);
            video.onended = showNextStory; // автоматически показывать следующую историю после завершения
    
            return modal;
        }
    
        function showNextStory() {
            currentStoryIndex++;
            if (currentStoryIndex < currentStories.length) {
                playStory(currentStories[currentStoryIndex]);
            } else {
                closeStoryModal();
            }
        }
    
        function showPreviousStory() {
            if (currentStoryIndex > 0) {
                currentStoryIndex--;
                playStory(currentStories[currentStoryIndex]);
            }
        }
    
        function closeStoryModal() {
            const modal = document.querySelector('.stories-modal');
            if (modal) modal.remove();
        }
    
        // Показать зрителей
        function toggleViewers(storyId) {
            const viewersList = document.getElementById(`viewers-list-${storyId}`);
            if (viewersList) {
                viewersList.style.display = viewersList.style.display === 'none' ? 'block' : 'none';
            }
        }
    
        async function loadUserStories(userId) {
    console.log(`Загрузка историй для пользователя с ID: ${userId}`);
    try {
        const response = await fetch(`http://localhost:5000/api/stories/${userId}`);
        if (!response.ok) {
            throw new Error(`Ошибка: ${response.status} ${response.statusText}`);
        }
        const stories = await response.json();
        console.log('Истории загружены:', stories); // Логируем загруженные истории
    } catch (error) {
        console.error('Ошибка при загрузке историй:', error.message); // Логируем ошибки
    }
}

async function loadMyStories() {
    const myUserId = "67222a945cd15ee28b56b886"; // Замените на ваш ID
    console.log(`Загрузка историй для пользователя с ID: ${myUserId}`);

    try {
        const response = await fetch(`http://localhost:5000/api/stories/user/${myUserId}`);
        if (!response.ok) {
            throw new Error(`Ошибка: ${response.status} ${response.statusText}`);
        }
        const stories = await response.json();
        console.log('Истории загружены:', stories);

        const storiesList = document.getElementById('my-stories-list');
        storiesList.innerHTML = ''; // Очистить предыдущие истории

        if (stories.length === 0) {
            storiesList.innerHTML = '<li>У вас нет историй.</li>';
            return;
        }

        stories.forEach(story => {
            // Создаем карточку для каждой истории
            const storyCard = document.createElement('li');
            storyCard.className = 'story-card';

            // Создаем элемент видео
            const videoElement = document.createElement('video');
            videoElement.src = story.videoUrl;
            videoElement.controls = true;

            storyCard.appendChild(videoElement);
            storiesList.appendChild(storyCard);
        });
    } catch (error) {
        console.error('Ошибка при загрузке историй:', error.message);
    }
}

// Вызовите loadMyStories при загрузке страницы
document.addEventListener('DOMContentLoaded', loadMyStories);

// Вызов функции при загрузке страницы
document.addEventListener("DOMContentLoaded", () => {
    const userId = "67222a945cd15ee28b56b886"; // Замени на актуальный userId
    loadMyStories(userId);
});
    </script>
</body>
</html>