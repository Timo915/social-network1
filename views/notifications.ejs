<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Уведомления</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f9f9f9;
        }
        nav {
            margin-bottom: 20px;
        }
        h1, h2 {
            color: #333;
        }
        ul {
            list-style-type: none;
            padding: 0;
        }
        li {
            margin: 10px 0;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            background-color: white;
        }
        button {
            margin-left: 10px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 5px 10px;
            cursor: pointer;
        }
        button:hover {
            background-color: #45a049;
        }
    </style>
</head>
<body>
    <h1>Уведомления</h1>
    <nav>
        <a href="/logout">Выйти</a>
        <a href="/home">Главная</a>
    </nav>

    <h2>Запросы в друзья и входящие звонки (общее: <span id="notificationCount">0</span>):</h2>
    <ul id="notificationList">
        <% 
        let notificationCount = 0;

        if (friendRequests && friendRequests.length > 0) {
            friendRequests.forEach(request => {
                notificationCount++;
%>
                <li>
                    <strong><%= request.sender.username || 'Автор не указан' %></strong> отправил вам запрос в друзья.
                    <button class="accept-button" data-request-id="<%= request._id %>">Принять</button>
                    <button onclick="declineRequest('<%= request._id %>')">Отклонить</button>
                </li>
<%
            });
        }

        // Фильтруем входящие вызовы, чтобы разрешить только один активный
        const uniqueCalls = new Map();

        if (incomingCalls && incomingCalls.length > 0) {
            incomingCalls.forEach(call => {
                // Сохраняем только последний входящий вызов от каждого абонента
                if (!uniqueCalls.has(call.caller.id)) {
                    uniqueCalls.set(call.caller.id, call);
                }
            });

            uniqueCalls.forEach(call => {
                notificationCount++;
%>
                <li>
                    <span>
                        Входящий вызов от:
                        <strong><%= call.caller.username || 'Имя пользователя недоступно' %></strong>
                    </span>
                    <span class="call-buttons">
                        <button onclick="answerCall('<%= call._id %>')">Ответить</button>
                        <button onclick="rejectCall('<%= call._id %>')">Отклонить</button>
                    </span>
                </li>
<%
            });
        }

        if (notificationCount === 0) {
%>
            <li>У вас нет новых уведомлений.</li>
<%
        }
        %>
    </ul>

    <script>
        document.getElementById('notificationCount').innerText = '<%= notificationCount %>';

        document.querySelectorAll('.accept-button').forEach(button => {
            button.addEventListener('click', function() {
                const requestId = this.dataset.requestId;
                acceptFriendRequest(requestId);
            });
        });

        async function acceptFriendRequest(requestId) {
            try {
                const response = await fetch(`/accept-request/${requestId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                });

                if (!response.ok) {
                    throw new Error('Не удалось принять запрос в друзья');
                }

                const data = await response.json();
                console.log(data.message);
                // Обновим количество уведомлений и сам список
                location.reload(); // Перезагрузим страницу для обновления уведомлений
            } catch (error) {
                console.error('Ошибка при принятии запроса в друзья:', error);
            }
        }

        function declineRequest(requestId) {
            fetch(`/decline-request/${requestId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ accept: false }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Запрос отклонен.');
                    location.reload();
                } else {
                    alert('Ошибка при отклонении запроса: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Ошибка:', error);
                alert('Не удалось отклонить запрос. Попробуйте позже.');
            });
        }

        function answerCall(callerId) {
            console.log(`Принятие звонка от ${callerId}`);
        }

        function rejectCall(callerId) {
            console.log(`Звонок от ${callerId} отклонён`);
        }
    </script>
</body>
</html>