<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Список Друзей и Звонки</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f0f2f5;
            color: #333;
        }
        h1, h2 {
            text-align: center;
        }
        #search {
            margin: 20px auto;
            max-width: 400px;
            display: flex;
            justify-content: center;
        }
        input[type="text"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            transition: border-color 0.3s;
        }
        input[type="text"]:focus {
            border-color: #007bff;
            outline: none;
        }
        .user-card {
            background: white;
            margin: 10px auto;
            padding: 15px;
            border: 1px solid #ccc;
            border-radius: 5px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            max-width: 600px;
        }
        button {
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 8px 12px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #0056b3;
        }
        .call-controls {
            display: flex;
            align-items: center;
        }
        .toggle-button {
            margin-left: 10px;
        }
        ul {
            list-style-type: none;
            padding: 0;
            margin: 20px auto;
            max-width: 600px;
        }
        .call-history {
            margin-top: 40px;
            border-top: 2px solid #007bff;
            padding-top: 20px;
        }
        #callInterface {
            display: none;
            max-width: 600px;
            margin: 20px auto;
            padding: 15px;
            background: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }
        #callInterface h2 {
            margin: 0;
            text-align: left;
        }
        #notificationContainer {
            display: none;
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
        }
        #notification {
            background-color: #007bff;
            color: white;
            padding: 10px;
            border-radius: 5px;
        }
        #notification button {
            background: none;
            border: none;
            color: white;
            float: right;
            cursor: pointer;
        }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/peerjs/1.3.1/peerjs.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
        <script src="/js/callManager.js"></script>
</head>

<body>
    <h1>Список Друзей</h1>
    
    <div id="search">
        <input type="text" id="searchInput" placeholder="Поиск пользователей..." oninput="searchUsers()">
    </div>

    <section>
        <h2>Друзья</h2>
        <ul id="friendsList"></ul>

        <h2>Отправленные запросы</h2>
        <ul id="sentRequestsList"></ul>

        <h2>История Звонков</h2>
        <ul id="callHistoryList"></ul>
    </section>

    <div id="callInterface">
        <h2>Вызов с <span id="callRecipient"></span></h2>
        
        <div class="call-controls">
            <button id="endCallButton">Завершить звонок</button>
            <label>
                <input type="checkbox" id="muteButton" class="toggle-button">
                Отключить микрофон
            </label>
            <label>
                <input type="checkbox" id="cameraButton" class="toggle-button">
                Отключить камеру
            </label>
        </div>
    </div>

    <ul id="searchResults"></ul>

    <div id="notificationContainer">
        <div id="notification">
            <span id="notificationMessage"></span>
            <button onclick="hideNotification()">×</button>
        </div>
    </div>

    <script>
        // Определяем переменные для текущего пользователя и параметров звонка
        let currentUser = null; 
        let currentCallRecipientId = null; 
        let currentStream = null; 
        let callTimer = null; 
        let peer; 
        let isCallActive = false; 

        // Функция для загрузки текущего пользователя
        async function loadCurrentUser() {
            try {
                const response = await fetch('/api/current-user'); 
                if (!response.ok) throw new Error('Не удалось загрузить текущего пользователя');
                return await response.json();
            } catch (error) {
                console.error(error.message);
                return null;
            }
        }

        // Функция для принятия входящего звонка
        function acceptCall(callId) {
            isCallActive = true; // Устанавливаем статус звонка как активный
            // Здесь будет логика для принятия звонка
        }

        // Функция для завершения звонка
        function endCall() {
            isCallActive = false; // Завершение звонка
            // Здесь будет логика для завершения звонка
        }

        // Функция для отображения уведомлений
        function showNotification(message) {
            const notificationContainer = document.getElementById('notificationContainer'); // Получаем контейнер для уведомлений
            const notificationMessage = document.getElementById('notificationMessage'); // Получаем элемент для сообщения
            
            notificationMessage.innerText = message; // Устанавливаем текст уведомления
            notificationContainer.style.display = 'block'; // Показываем уведомление
            
            setTimeout(() => {
                hideNotification(); // Скрываем уведомление через 5 секунд
            }, 5000);
        }

        // Функция для скрытия уведомлений
        function hideNotification() {
            const notificationContainer = document.getElementById('notificationContainer'); // Получаем контейнер уведомления
            notificationContainer.style.display = 'none'; // Скрываем уведомление
        }

        // Функция для загрузки списка друзей
        async function loadFriends() {
            try {
                const response = await fetch('/api/get-friends'); // Запрос списка друзей
                const text = await response.text(); // Получаем текст ответа
                console.log(text); // Логируем текст

                if (!response.ok) {
                    throw new Error('Ошибка сети: ' + text); // Обработка ошибок
                }

                const friendsList = JSON.parse(text); // Парсим JSON-ответ

                const friendsContainer = document.getElementById('friendsList'); // Получаем контейнер для друзей
                friendsContainer.innerHTML = ''; // Очищаем текущий список

                friendsList.forEach(friend => { // Проходим по каждому другу
                    const listItem = document.createElement('li'); // Создаем элемент списка
                    listItem.className = 'user-card'; // Устанавливаем класс
                    listItem.innerHTML = `
                        <span>${friend.username}</span> 
                        <button onclick="initiateVideoCall('${friend._id}')">Видеозвонок</button>
                        <button onclick="initiateVoiceCall('${friend._id}')">Голосовой звонок</button>
                    `; // Добавляем данные о друге и кнопки для звонков
                    friendsContainer.appendChild(listItem); // Добавляем элемент в контейнер
                });
            } catch (error) {
                console.error('Ошибка при загрузке списка друзей:', error); // Логируем ошибку
            }
        }

        // Функция для инициализации голосового звонка
        async function initiateVoiceCall(userId) {
            if (!currentUser) {
                console.error('Текущий пользователь не загружен.'); 
                showNotification('Ошибка: невозможно инициировать звонок, пользователь не загружен.');
                return;
            }

            currentCallRecipientId = userId; // Устанавливаем ID получателя
            document.getElementById('callRecipient').innerText = `Голосовой вызов с ${userId}`; // Устанавливаем получателя в интерфейсе
            document.getElementById('callInterface').style.display = 'block'; // Показываем интерфейс звонка

            try {
                currentStream = await navigator.mediaDevices.getUserMedia({ audio: true }); // Запрашиваем доступ к аудио
                
                const response = await fetch('/api/calls', { // Сохраняем звонок в базе данных
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        userId: currentUser._id,
                        withUser: userId,
                        status: 'outgoing',
                        callType: 'voice'
                    })
                });

                if (!response.ok) {
                    throw new Error('Ошибка при сохранении звонка в базе данных: ' + response.statusText);
                }

                showNotification(`Голосовой вызов с пользователем ${userId} инициализирован!`); // Показываем уведомление
            } catch (error) {
                console.error('Ошибка:', error); // Логируем ошибку
                showNotification('Ошибка при инициализации голосового звонка: ' + error.message);
            }
        }

        // Функция для загрузки отправленных запросов
        async function loadSentRequests() {
            try {
                const response = await fetch('/api/get-sent-requests'); // Запрос для получения отправленных запросов
                const requests = await response.json(); // Парсим JSON-ответ
                const sentRequestsList = document.getElementById('sentRequestsList'); // Получаем контейнер для отправленных запросов
                sentRequestsList.innerHTML = ''; // Очищаем текущий список

                requests.forEach(request => { // Проходим по каждому запросу
                    const listItem = document.createElement('li'); // Создаем элемент списка
                    listItem.className = 'user-card'; // Устанавливаем класс
                    listItem.innerHTML = `
                        <span>${request.receiver.username} (запрос отправлен)</span>
                        <button onclick="cancelFriendRequest('${request._id}')">Отменить запрос</button>
                    `; // Добавляем данные о запросе
                    sentRequestsList.appendChild(listItem); // Добавляем элемент в контейнер
                });
            } catch (error) {
                console.error('Ошибка при загрузке отправленных запросов:', error); // Логируем ошибку
                showNotification('Ошибка при загрузке отправленных запросов: ' + error.message);
            }
        }

        // Функция для загрузки истории звонков
        async function loadCallHistory() {
            try {
                const response = await fetch('/api/calls'); // Запрос для получения истории звонков
                if (!response.ok) {
                    throw new Error('Ошибка в получении данных');
                }
                const calls = await response.json(); // Парсим JSON-ответ
                console.log('Полученные звонки:', calls); // Логируем данные о звонках

                const callHistoryList = document.getElementById('callHistoryList'); // Получаем контейнер для истории звонков
                callHistoryList.innerHTML = ''; // Очищаем текущий список

                calls.forEach(call => { // Проходим по каждому звонку
                    const statusButtons = getStatusButtons(call); // Получаем кнопки статуса звонка
                    const withUser = call.withUser ? call.withUser.username : 'Неизвестный пользователь'; // Имя пользователя
                    const createdAt = new Date(call.callData.createdAt); // Дата звонка
                    const formattedDate = createdAt.toLocaleString(); // Форматируем дату

                    const listItem = document.createElement('li'); // Создаем элемент списка
                    listItem.className = 'user-card'; // Устанавливаем класс
                    listItem.innerHTML = `
                        <span>Звонок с ${withUser}, Дата: ${formattedDate}, Статус: ${call.status || 'неизвестный статус'}</span>
                        ${statusButtons}
                    `; // Добавляем данные о звонке
                    callHistoryList.appendChild(listItem); // Добавляем элемент в контейнер
                });
            } catch (error) {
                console.error('Ошибка при загрузке истории звонков:', error); // Логируем ошибку
            }
        }

        // Функция для получения кнопок статуса звонка
        function getStatusButtons(call) {
            if (!call || !call.withUser) {
                console.error('Свойство withUser не определено для звонка:', call); // Логируем ошибку
                return `<span>Ошибка: пользователя нет</span>`;
            }

            const withUser = call.withUser.username; // Имя пользователя, с которым звонок
            const status = call.status || 'неизвестный статус'; // Статус звонка
            const peerId = call.withUser._id; // Получаем ID пользователя для перезвона

            if (status === 'incoming') {
                return `<button onclick="acceptCall('${call._id}', '${peerId}')">Принять</button>
                        <button onclick="declineCall('${call._id}')">Отклонить</button>`; // Кнопки для входящего звонка
            } else {
                return `<button onclick="makeCall('${peerId}')">Перезвонить</button>`; // Кнопка для перезвона
            }
        }

        // Функция для совершения исходящего вызова
        function makeCall(peerId) {
            const call = peer.call(peerId, currentStream); // Совершение вызова
            
            call.on('stream', remoteStream => { // Обработка поступающего потока
                const remoteVideoElement = document.getElementById('remoteVideo'); // Получаем элемент видео
                remoteVideoElement.srcObject = remoteStream; // Устанавливаем источник потока
            });

            call.on('error', (error) => { // Обработка ошибок вызова
                console.error('Ошибка при совершении вызова:', error);
                alert('Ошибка при попытке перезвонить. Пожалуйста, попробуйте снова.');
            });
        }

        // Функция для ответа на входящий звонок
        function answerCall(peerId) {
            const incomingCall = peer.call(peerId, currentStream); // Принятие входящего звонка
            
            incomingCall.on('stream', remoteStream => {
                const remoteVideoElement = document.getElementById('remoteVideo'); // Получаем элемент видео
                remoteVideoElement.srcObject = remoteStream; // Устанавливаем источник потока
            });

            incomingCall.on('error', (error) => {
                console.error('Ошибка при ответе на вызов:', error);
                alert('Ошибка при попытке ответить на звонок. Пожалуйста, попробуйте снова.');
            });
        }

        // Функция для отображения модального окна на входящий звонок
        function showIncomingCallModal(callData) {
            Swal.fire({
                title: `Входящий вызов от ${callData.callerId}`,
                text: "Принять?",
                icon: 'info',
                showCancelButton: true,
                confirmButtonText: 'Принять',
                cancelButtonText: 'Отклонить'
            }).then((result) => {
                if (result.isConfirmed) {
                    const call = peer.call(callData.peerId, currentStream); // Логика принятия звонка
                    call.on('stream', remoteStream => {
                        const remoteVideoElement = document.getElementById('remoteVideo');
                        remoteVideoElement.srcObject = remoteStream; // Воспроизводим удаленный поток
                    });

                    call.on('error', (error) => {
                        console.error('Call error:', error);
                        alert('Ошибка при установлении вызова. Пожалуйста, попробуйте снова.');
                    });
                } else {
                    socket.emit('call-declined', callData.callId); // Отказ от звонка
                }
            });
        }

        // Слушаем событие входящего звонка
        socket.on('incoming-call', (callData) => {
            if (isCallActive) {
                showError("Вы уже находитесь в звонке."); // Лимитация на принятие второго звонка
                return;
            }
            showIncomingCallNotification(callData); // Отображаем уведомление о вызове
        });

        // Функция для принятия звонка
        function acceptCall(callId, peerId) {
            const call = peer.call(peerId, currentStream); // Используем текущий поток медиа
            
            call.on('stream', (remoteStream) => {
                const remoteVideoElement = document.getElementById('remoteVideo');
                remoteVideoElement.srcObject = remoteStream; // Устанавливаем источник удаленного потока
            });

            call.on('error', (error) => {
                console.error('Ошибка при принятии вызова:', error);
                alert('Ошибка при установлении вызова. Пожалуйста, попробуйте снова.');
            });
        }

        async function declineCall(callId) {
            await markCallAsCompleted(callId); // Уведомляем сервер об отклонении вызова
            console.log('Вызов отклонен'); // Логируем отклонение звонка
        }

        // Функция для пометки звонка как завершенного
        async function markCallAsCompleted(callId) {
            try {
                const response = await fetch('/api/mark-call-completed', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ callId: callId }) // Отправляем ID завершенного звонка
                });

                if (!response.ok) {
                    throw new Error('Ошибка при обновлении статуса звонка: ' + response.statusText);
                }
            } catch (error) {
                console.error('Ошибка при пометке звонка:', error);
                showNotification('Ошибка при пометке звонка: ' + error.message);
            }
        }

        // Функция для обработки пропущенного звонка
        async function handleMissedCall() {
            showNotification(`Звонок с пользователем ${currentCallRecipientId} не был завершен. Он помечен как пропущенный.`);
            await markAsMissedCall(currentCallRecipientId); // Помечаем звонок как пропущенный
            resetCallInterface(); // Сбрасываем интерфейс звонка
        }

        // Функция для пометки звонка как пропущенного
        async function markAsMissedCall(callId) {
            try {
                const response = await fetch(`/api/mark-missed-call/${callId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ status: 'missed' }) // Отправляем статус пропущенного вызова
                });

                if (!response.ok) {
                    console.error('Ошибка при пометке звонка как пропущенного:', response.statusText);
                } else {
                    console.log('Статус звонка обновлён на "missed".');
                }
            } catch (error) {
                console.error('Ошибка при пометке звонка:', error);
            }
        }

        // Функция для поиска пользователей
        async function searchUsers() {
            const searchTerm = document.getElementById('searchInput').value.trim(); // Получаем текст из поля поиска
            if (searchTerm === '') {
                document.getElementById('searchResults').innerHTML = ''; // Очищаем результаты
                return; // Выход, если поле пустое
            }
            try {
                const response = await fetch(`/api/search-users?term=${searchTerm}`); // Запрос на поиск
                const users = await response.json(); // Парсим ответ
                const resultsList = document.getElementById('searchResults'); // Получаем контейнер для результатов
                resultsList.innerHTML = ''; // Очищаем предыдущие результаты

                if (users.length > 0) {
                    users.forEach(user => { // Проходим по найденным пользователям
                        const resultItem = document.createElement('li'); // Создаем элемент списка
                        resultItem.className = 'user-card'; // Устанавливаем класс
                        resultItem.innerHTML = `
                            <span>${user.username}</span>
                            <button onclick="initiateVideoCall('${user._id}')">Видеозвонок</button>
                        `; // Добавляем данные пользователя
                        resultsList.appendChild(resultItem); // Добавляем элемент в контейнер
                    });
                } else {
                    resultsList.innerHTML = '<li class="user-card">Пользователи не найдены.</li>'; // Сообщение при отсутствии пользователей
                }
            } catch (error) {
                console.error('Ошибка при поиске пользователей:', error); // Логируем ошибку
                showNotification('Ошибка при поиске пользователей: ' + error.message);
            }
        }

        // Функция для инициализации видеозвонка
        async function initiateVideoCall(userId) {
            if (!currentUser) {
                console.error('Текущий пользователь не загружен.'); 
                showNotification('Ошибка: невозможно инициировать звонок, пользователь не загружен.');
                return;
            }

            const friendUser = await getUserById(userId); // Получаем информацию о пользователе
            if (!friendUser) {
                console.error('Пользователь не найден.'); 
                showNotification('Ошибка: пользователь не найден.');
                return;
            }

            currentCallRecipientId = userId; // Устанавливаем ID получателя
            document.getElementById('callRecipient').innerText = `Пользователь ${friendUser.username}`; // Устанавливаем получателя в интерфейсе
            document.getElementById('callInterface').style.display = 'block'; // Показываем интерфейс звонка

            if (currentStream) { // Если уже есть поток, останавливаем его
                currentStream.getTracks().forEach(track => track.stop());
                currentStream = null; // Обнуляем поток
            }

            if (callTimer) {
                clearTimeout(callTimer); // Очищаем таймер
                callTimer = null; 
            }

            try {
                currentStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true }); // Запрашиваем доступ к камере и микрофону
                callTimer = setTimeout(handleMissedCall, 300000); // Устанавливаем таймер на 5 минут

                const response = await fetch('/api/calls', { // Сохраняем звонок в базе данных
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        userId: currentUser._id,
                        withUser: userId,
                        status: 'outgoing'
                    })
                });

                if (!response.ok) {
                    throw new Error('Ошибка при сохранении звонка в базе данных: ' + response.statusText);
                }

                showNotification(`Видеозвонок с пользователем ${friendUser.username} инициализирован!`); // Показываем уведомление
            } catch (error) {
                console.error('Ошибка:', error); // Логируем ошибку
                if (error.name === 'NotAllowedError') {
                    showNotification('Ошибка: доступ к камере и микрофону запрещён.');
                } else if (error.name === 'NotFoundError') {
                    showNotification('Ошибка: одно из устройств не найдено.');
                } else {
                    showNotification('Ошибка при инициализации видеозвонка: ' + error.message);
                }
            }
        }

        // Функция для получения пользователя по его ID
        async function getUserById(userId) {
            try {
                const response = await fetch(`/api/get-user/${userId}`); // Запрос для получения пользователя
                if (!response.ok) {
                    throw new Error('Ошибка при получении пользователя: ' + response.statusText);
                }
                return await response.json(); // Возвращаем данные о пользователе
            } catch (error) {
                console.error(error); // Логируем ошибку
                return null; // Возвращаем null в случае ошибки
            }
        }

        // Функция для сброса интерфейса звонка
        function resetCallInterface() {
            document.getElementById('callInterface').style.display = 'none'; // Скрываем интерфейс вызова 

            if (currentStream) {
                currentStream.getTracks().forEach(track => track.stop()); // Останавливаем все треки потока
            }

            if (callTimer) {
                clearTimeout(callTimer); // Очищаем таймер
                callTimer = null; 
            }

            currentCallRecipientId = null; // Сброс ID текущего звонка
        }

        // Обработка клика по кнопке завершения звонка
        document.getElementById('endCallButton').addEventListener('click', async () => {
            showNotification(`Звонок с пользователем ${currentCallRecipientId} завершен.`); // Уведомляем о завершении звонка
            await markCallAsCompleted(currentCallRecipientId); // Помечаем звонок как завершенный
            resetCallInterface(); // Сбрасываем интерфейс
        });

        // Отключение микрофона
        document.getElementById('muteButton').addEventListener('change', (event) => {
            if (currentStream) { // Если поток существует
                currentStream.getAudioTracks().forEach(track => {
                    track.enabled = !event.target.checked; // Включаем/выключаем аудиотрек
                });
            }
        });

        // Отключение камеры
        document.getElementById('cameraButton').addEventListener('change', (event) => {
            if (currentStream) {
                currentStream.getVideoTracks().forEach(track => {
                    track.enabled = !event.target.checked; // Включаем/выключаем видеотрек
                });
            }
        });

        // Обработчик события при загрузке документа
        document.addEventListener('DOMContentLoaded', () => {
    const endCallButton = document.getElementById('endCallButton');
    if (endCallButton) {
        endCallButton.addEventListener('click', async () => {
            await endCall(); // Ваш код завершения звонка
        });
    } else {
        console.error('endCallButton не найден в DOM');
    }
});

        // Загрузка данных при загрузке страницы
        window.onload = async () => {
    currentUser = await loadCurrentUser(); // Загрузка текущего пользователя
    if (!currentUser) {
        console.error('Не удалось загрузить текущего пользователя.');
        return; // Выход, если пользователь не загружен
    }
    
    await loadFriends(); // Загружаем список друзей
    await loadCallHistory(); // Загружаем историю звонков
    peer = new Peer(); // Инициализация экземпляра Peer

    // Входящие звонки и события
    socket.on('incoming-call', (callData) => {
        if (isCallActive) {
            showError("Вы уже находитесь в звонке."); // Ошибка, если уже в звонке
            return; // Выход
        }
        showIncomingCallNotification(callData); // Показываем уведомление о входящем звонке
    });

    peer.on('call', function(call) {
        call.answer(currentStream); // Ответ на звонок с текущим потоком

        call.on('stream', function(remoteStream) {
            const remoteVideoElement = document.getElementById('remoteVideo'); // Получаем элемент видео
            remoteVideoElement.srcObject = remoteStream; // Устанавливаем источник потока
        });
    });
};
    </script>
</body>
</html>